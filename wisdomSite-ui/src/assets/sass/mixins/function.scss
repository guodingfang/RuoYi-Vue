@import "config";

/* BEM support Func
 -------------------------- */
@function selectorToString($selector) {
  $selector: inspect($selector);
  $selector: str-slice($selector, 2, -2);
  @return $selector;
}

@function containsModifier($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, $modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

@function containWhenFlag($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, "." + $state-prefix) {
    @return true;
  } @else {
    @return false;
  }
}

@function containPseudoClass($selector) {
  $selector: selectorToString($selector);

  @if str-index($selector, ":") {
    @return true;
  } @else {
    @return false;
  }
}

@function hitAllSpecialNestRule($selector) {
  @return containsModifier($selector) or containWhenFlag($selector) or
    containPseudoClass($selector);
}

// 根据一个 color 反mix 出来源 color
@function unmix($in, $mix, $pe) {
  $red: red($in);
  $green: green($in);
  $blue: blue($in);
  @debug #{$red};

  $red-in: red($mix);
  $green-in: green($mix);
  $blue-in: blue($mix);
  @debug #{$red-in};
  $per: $pe / 100;

  $r: ($red - ($red-in * $per)) / (1 - $per);
  $g: ($green - ($green-in * $per)) / (1 - $per);
  $b: ($blue - ($blue-in * $per)) / (1 - $per);

  @debug #{$r};
  @debug #{$g};
  @debug #{$b};
  @return rgb($r, $g, $b);
}

@function genNameSpace($name) {
  $out: $namespace;
  @if ($name == "m") {
    $out: $innernamespace;
  } @else if ($name == "a") {
    $out: $inneratomspace;
  } @else if($name == "g") {
    $out: $innerglobalspace;
  } @else if($name == "c") {
    $out: $namespace;
  }@else if($name == "im") {
    $out: $innermodulenamespace;
  }
  @return $out;
}
